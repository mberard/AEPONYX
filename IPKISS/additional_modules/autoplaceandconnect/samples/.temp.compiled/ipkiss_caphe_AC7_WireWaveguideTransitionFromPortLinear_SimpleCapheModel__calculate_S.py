
########## THIS FILE IS AUTO-GENERATED BY                            ##########
########## ipkiss3.simulation.engines.caphe_circuit_sim.optimize     ##########
########## PLEASE DO NOT MODIFY THIS FILE. MODIFY THE MODEL INSTEAD. ##########
########## THIS FILE IS PASSED ON TO CAPHE FOR COMPILATION.          ##########

from ipkiss3.pcell.photonics.transition import CapheModelView, CapheSModelView, FractionProperty, LayoutView, NonNegativeNumberProperty, PCell, PropertyValidationError, ShapeTraceTransition, ShapeWaveguideTransition, ShapeWindowTraceTransition, ShapeWindowWaveguideTransition, TraceTransition, TraceTransitionFromPort, ViewInSameCellProperty, WaveguideTemplateProperty, WaveguideTransition, WaveguideTransitionFromPort, WindowTraceTransition, WindowWaveguideTransition, _WaveguideCrossSection, __builtins__, __doc__, __file__, __name__, __package__, compile_function, exp, pi

########## END OF IMPORTS.              ##########
########## YOU CAN FIND THE MODEL THAT  ##########
########## WILL BE COMPILED BELOW.      ##########

# Auto-generated function.
def calculate_S(self, node, environment, p1, p2):
    """Calculate physical ports / modes from p1 / p2. Cython does not recognize divmod nicely, so we use % and // functions instead"""
    ph_p1 = p1 % node.n_ports
    m1 = p1 // node.n_ports
    ph_p2 = p2 % node.n_ports
    m2 = p2 // node.n_ports

    if ((ph_p1 == 0 and ph_p2 == 1) or 
        (ph_p1 == 1 and ph_p2 == 0)):
        wavelength = environment.wavelength
        dneff = -(self.n_g - self.n_eff) / self.center_wavelength
        neff_total = self.n_eff + (wavelength - self.center_wavelength) * dneff
        loss = 10 ** (-self.loss_dB_m * self.length * 1e-6  / 20.0)
        return exp(1j * 2 * pi / wavelength * neff_total * self.length) * loss
    else:
        return 0
